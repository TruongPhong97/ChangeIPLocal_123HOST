from dotenv import load_dotenv, set_key
import API_123HOST
import os
import requests
import time
import random
import datetime
import traceback

def print_random_color_with_datetime(message: str):
    colors = ["Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Magenta", "Pink"]
    color = random.choice(colors)
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}][{color}] {message}")

def get_current_ip():
    try:
        response = requests.get("https://api.myip.com", timeout=10)
        if response.status_code == 200:
            return response.json().get("ip")
    except Exception as e:
        print_random_color_with_datetime(f"Error fetching IP: {e}")
    return None

def refresh_and_update_tokens(refresh_token: str):
    try:
        access_token, new_refresh_token = API_123HOST.Refresh_Token(refresh_token)
        set_key(".env", "access_token", access_token)
        set_key(".env", "refresh_token", new_refresh_token)
        print_random_color_with_datetime("‚úÖ Token refreshed successfully")
        return access_token, new_refresh_token
    except Exception as e:
        print_random_color_with_datetime(f"‚ùå Failed to refresh token: {e}")
        traceback.print_exc()
        return None, refresh_token

def main():
    load_dotenv()
    access_token = os.getenv("access_token")
    refresh_token = os.getenv("refresh_token")
    domain_name = os.getenv("domain")

    # L√†m m·ªõi token ban ƒë·∫ßu
    access_token, refresh_token = refresh_and_update_tokens(refresh_token)
    if not access_token:
        print_random_color_with_datetime("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y access_token ban ƒë·∫ßu. Tho√°t.")
        return

    # L·∫•y domain_id v√† IP local
    try:
        domain_id, ip_local = API_123HOST.GetInfoDomainByDomain(access_token, domain_name)
    except Exception as e:
        print_random_color_with_datetime(f"‚ùå L·ªói khi l·∫•y domain_id ban ƒë·∫ßu: {e}")
        traceback.print_exc()
        ip_local = None

    while True:
        try:
            current_ip = get_current_ip()

            if current_ip is None:
                print_random_color_with_datetime("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y IP hi·ªán t·∫°i.")
                time.sleep(10)
                continue

            if ip_local != current_ip:
                print_random_color_with_datetime("üîÅ Ph√°t hi·ªán thay ƒë·ªïi IP")
                print_random_color_with_datetime(f"üåê IP m·ªõi: {current_ip}")
                print_random_color_with_datetime(f"üß† IP c≈©: {ip_local}")
                print_random_color_with_datetime(f"üîê Access Token: {access_token}")

                try:
                    domain_id, _ = API_123HOST.GetInfoDomainByDomain(access_token, domain_name)
                    if API_123HOST.UpdateDNSDomain(access_token, domain_id, current_ip):
                        print_random_color_with_datetime("‚úÖ C·∫≠p nh·∫≠t DNS th√†nh c√¥ng!")
                        ip_local = current_ip
                    else:
                        print_random_color_with_datetime("‚ùå C·∫≠p nh·∫≠t DNS th·∫•t b·∫°i.")
                except Exception as e:
                    print_random_color_with_datetime(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t DNS: {e}")
                    traceback.print_exc()

            else:
                print_random_color_with_datetime("‚úîÔ∏è IP kh√¥ng thay ƒë·ªïi")

        except Exception as e:
            print_random_color_with_datetime(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            traceback.print_exc()

        # Lu√¥n ƒë·∫£m b·∫£o n·∫øu l·ªói th√¨ th·ª≠ refresh token
        try:
            info_account = API_123HOST.GetInfoAccount(access_token)
            if info_account is None:
                print_random_color_with_datetime("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
                print_random_color_with_datetime("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n. Th·ª≠ l√†m m·ªõi token.")
                access_token, refresh_token = refresh_and_update_tokens(refresh_token)
            else:
                print_random_color_with_datetime(f"‚úîÔ∏è Token v·∫´n ƒëang ho·∫°t ƒë·ªông, ti·∫øp t·ª•c ki·ªÉm tra ...")
        except Exception as e:
            print_random_color_with_datetime(f"‚ùå L·ªói khi l√†m m·ªõi token: {e}")
            traceback.print_exc()

        time.sleep(10)

if __name__ == "__main__":
    while True:
        try:
            main()
        except Exception as main_e:
            print_random_color_with_datetime(f"üî• L·ªói nghi√™m tr·ªçng ·ªü c·∫•p ƒë·ªô main: {main_e}")
            traceback.print_exc()
            print_random_color_with_datetime("üîÅ Kh·ªüi ƒë·ªông l·∫°i sau 10 gi√¢y...")
            time.sleep(10)
